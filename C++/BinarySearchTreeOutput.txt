//Binary search trees have three different traversal methods. For my output, I decided to print the 
//tree in order, starting from the root, then checking the left, then right child. 

Binary Search Tree: 
root: 0
0 nullptr, 7
7 nullptr, 49
9 nullptr, nullptr
23 9, nullptr
30 23, 44
44 nullptr, nullptr
49 30, 73
58 nullptr, 72
72 nullptr, nullptr
73 58, 78
78 nullptr, nullptr

//We will nto remove the node 7.

Binary Search Tree: 
root: 0
0 nullptr, 49
9 nullptr, nullptr
23 9, nullptr
30 23, 44
44 nullptr, nullptr
49 30, 73
58 nullptr, 72
72 nullptr, nullptr
73 58, 78
78 nullptr, nullptr

//showcasing my search algorithm
//60 and -1 are not in the tree, however 58 is.

60 not found
-1 not found
Found 58

//We are now going to insert a node holding the value -5.

Binary Search Tree: 
root: 0
-5 nullptr, nullptr
0 -5, 49
9 nullptr, nullptr
23 9, nullptr
30 23, 44
44 nullptr, nullptr
49 30, 73
58 nullptr, 72
72 nullptr, nullptr
73 58, 78
78 nullptr, nullptr

//We remove the root node to showcase the remove operation with two children, possibly the worst case

Binary Search Tree: 
root: 9
-5 nullptr, nullptr
9 -5, 49
23 nullptr, nullptr
30 23, 44
44 nullptr, nullptr
49 30, 73
58 nullptr, 72
72 nullptr, nullptr
73 58, 78
78 nullptr, nullptr

//All our Binary search tree operations work, hooray!
