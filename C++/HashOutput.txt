//For my hash table implementation, I decided to feature three different methods for handling
//collisions. The default constructor sets the hash table to linear probing, searching the entire table
//for a vacant spot.

//if the user inputs 0 into the constructor, the collision resolution method is linear probing
//1 = double hashing
//2 = separate chaining

//when linear probing, if a hashed index is occupied, we will loop through the entire list until
//we encounter a vacant spot

//when double hashing, I used the formula i = hash1(key) + (LocalCollisions + hash2(key)) % tablesize
//i represents the index
//hash1 is key = key % tablesize
//hash2 is key = key^2 % tablesize

//when separate chaining, every index of the hash table is a list. When a collision is encountered,
//we simply append the value to the end of the list, however for my implementation, I sort the 
//list after each insertion.

Hash Table (Linear Probing): 
0: 0
1: 49
2: 0
3: 0
4: 0
5: 0
6: 0
7: 7
8: 72
9: 73
10: 58
11: 23
12: 44
13: 9
14: 30
15: 78

//we insert 60 into the tree, 60 % the size of the tree (16) is 12, but since 12 is not vacant, we 
//scan the next indiced until we reach the end of the table and start at 0.

//60 was inserted into 0 because 12 and every position after that was occupied.

Hash Table (Linear Probing): 
0: 60
1: 49
2: 0
3: 0
4: 0
5: 0
6: 0
7: 7
8: 72
9: 73
10: 58
11: 23
12: 44
13: 9
14: 30
15: 78

//we insert 40 to showcase the insert operation again.

Hash Table (Linear Probing): 
0: 60
1: 49
2: 40
3: 0
4: 0
5: 0
6: 0
7: 7
8: 72
9: 73
10: 58
11: 23
12: 44
13: 9
14: 30
15: 78

//we check the number of collisions, everytime the table checks for an empty index and the 
//index is occupied, we have encountered a collision and for this, we have to increase the 
//collision counter and move to the next index.

27

//showcasing the search operations.

40 has been found!
1 is not in the table

//when table.put(index, value) is used in my table, if the index we are putting our value in is
//occupied, we replace the current value with the new one.

Replacing 58 with 400

//showcasing new table.

Hash Table (Linear Probing): 
0: 60
1: 49
2: 40
3: 0
4: 0
5: 0
6: 0
7: 7
8: 72
9: 73
10: 400
11: 23
12: 44
13: 9
14: 30
15: 78

//40 has been removed from this table.

Hash Table (Linear Probing): 
0: 60
1: 49
2: 0
3: 0
4: 0
5: 0
6: 0
7: 7
8: 72
9: 73
10: 400
11: 23
12: 44
13: 9
14: 30
15: 78

//The table below calls the exact same operations as the table above, however this table uses
//double hashing.

Hash Table (Double Hashing): 
0: 0
1: 0
2: 65
3: 0
4: 27
5: 0
6: 29
7: 0
8: 40
9: 87
10: 40
11: 0
12: 92
13: 3
14: 42
15: 12

Hash Table (Double Hashing): 
0: 60
1: 0
2: 65
3: 0
4: 27
5: 0
6: 29
7: 0
8: 40
9: 87
10: 40
11: 0
12: 92
13: 3
14: 42
15: 12

Hash Table (Double Hashing): 
0: 60
1: 0
2: 65
3: 0
4: 27
5: 0
6: 29
7: 0
8: 40
9: 87
10: 40
11: 40
12: 92
13: 3
14: 42
15: 12

//number of collisions:

18

//showcasing search operations:

40 has been found!
1 is not in the table
Replacing 40 with 400

Hash Table (Double Hashing): 
0: 60
1: 0
2: 65
3: 0
4: 27
5: 0
6: 29
7: 0
8: 40
9: 87
10: 400
11: 40
12: 92
13: 3
14: 42
15: 12

//an instance of 40 has been removed fro the hash table.

Hash Table (Double Hashing): 
0: 60
1: 0
2: 65
3: 0
4: 27
5: 0
6: 29
7: 0
8: 0
9: 87
10: 400
11: 40
12: 92
13: 3
14: 42
15: 12

//below is a table which uses a vector of lists (separate chaining collision resolution)

Hash Table (Separate Chaining): 
0: 16 
1: 33 
2: 
3: 3 35 99 
4: 
5: 69 
6: 
7: 
8: 
9: 9 57 
10: 
11: 
12: 60 
13: 
14: 78 
15: 

Hash Table (Separate Chaining): 
0: 16 
1: 33 
2: 
3: 3 35 99 
4: 
5: 69 
6: 
7: 
8: 
9: 9 57 
10: 
11: 
12: 60 60 
13: 
14: 78 
15: 

Hash Table (Separate Chaining): 
0: 16 
1: 33 
2: 
3: 3 35 99 
4: 
5: 69 
6: 
7: 
8: 40 
9: 9 57 
10: 
11: 
12: 60 60 
13: 
14: 78 
15: 

//Number of collisions so far:

8

//showcasing search operations

40 has been found!
1 is not in the table

Hash Table (Separate Chaining): 
0: 16 
1: 33 
2: 
3: 3 35 99 
4: 
5: 69 
6: 
7: 
8: 
9: 9 57 
10: 
11: 
12: 60 60 
13: 
14: 78 
15: 

